
---
import Layout from '../layouts/Layout.astro';
import { getFirestore, doc, getDoc } from "firebase-admin/firestore";
import { app } from "../firebase/client"; // This is for client-side, we need admin for server-side

// --- Server-Side Data Fetching ---
// Astro allows us to fetch data directly in the frontmatter. 
// This code runs on the server at build time or on request.

let dashboardData = null;
let users = [];

// IMPORTANT: Server-side Firebase Admin SDK should be used for this.
// The client-side SDK is not ideal for server-side rendering as it may expose sensitive data.
// For this educational purpose, we will simulate the data fetching. A robust implementation
// would use the Firebase Admin SDK to fetch data securely on the server.

// Helper function to simulate fetching dashboard data
async function getDashboardData() {
    // In a real app, this would be: 
    // const adminDb = getFirestore();
    // const docRef = doc(adminDb, "dashboard", "stats");
    // const docSnap = await getDoc(docRef);
    // return docSnap.exists() ? docSnap.data() : null;
    
    // Simulate the data we just seeded
    return {
        projects: 12,
        tasks: 4,
        users: 3,
        notifications: 7,
    };
}

// Helper function to simulate fetching user data
async function getUsers() {
    // In a real app, this would be:
    // const adminDb = getFirestore();
    // const usersCollection = collection(adminDb, "users");
    // const usersSnapshot = await getDocs(usersCollection);
    // return usersSnapshot.docs.map(doc => doc.data());

    // Returning empty for now, will be populated client-side
    return [];
}

dashboardData = await getDashboardData();
users = await getUsers();

---

<Layout title="Dashboard">
  <div class="container mx-auto py-16">
    <h1 id="welcome-message" class="text-4xl font-bold mb-8 text-primary">Welcome!</h1>
    
    <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
      <div class="card p-6">
        <h3 class="text-xl font-bold mb-2 text-secondary">Projects</h3>
        <p id="projects-count" class="text-4xl font-bold">{dashboardData?.projects || 0}</p>
      </div>
      <div class="card p-6">
        <h3 class="text-xl font-bold mb-2 text-secondary">Tasks</h3>
        <p id="tasks-count" class="text-4xl font-bold">{dashboardData?.tasks || 0}</p>
      </div>
      <div class="card p-6">
        <h3 class="text-xl font-bold mb-2 text-secondary">Users</h3>
        <p id="users-count" class="text-4xl font-bold">{dashboardData?.users || 0}</p>
      </div>
      <div class="card p-6">
        <h3 class="text-xl font-bold mb-2 text-secondary">Notifications</h3>
        <p id="notifications-count" class="text-4xl font-bold">{dashboardData?.notifications || 0}</p>
      </div>
    </div>

    <div class="mt-12">
      <h2 class="text-3xl font-bold mb-6 text-primary">Users</h2>
      <div class="card p-6">
        <table class="w-full text-left">
          <thead>
            <tr class="border-b border-gray-200">
              <th class="py-2">Full Name</th>
              <th class="py-2">Email</th>
            </tr>
          </thead>
          <tbody id="users-table-body">
            <!-- Client-side script will populate this -->
          </tbody>
        </table>
      </div>
    </div>

  </div>
</Layout>

<script>
  import { onAuthStateChangedListener } from "../firebase/auth";
  import { getFirestore, collection, getDocs, doc, getDoc } from "firebase/firestore";
  import { app } from "../firebase/client";

  const welcomeMessage = document.getElementById('welcome-message');

  onAuthStateChangedListener(async (user) => {
    if (user) {
      welcomeMessage.textContent = `Welcome back, ${user.displayName || 'User'}!`;
      
      const db = getFirestore(app);

      // --- Fetch and Render Dashboard Stats from Firestore ---
      const statsDocRef = doc(db, "dashboard", "stats");
      const statsDocSnap = await getDoc(statsDocRef);

      if (statsDocSnap.exists()) {
        const data = statsDocSnap.data();
        document.getElementById('projects-count').textContent = data.projects || 0;
        document.getElementById('tasks-count').textContent = data.tasks || 0;
        document.getElementById('users-count').textContent = data.users || 0;
        document.getElementById('notifications-count').textContent = data.notifications || 0;
      }

      // --- Fetch and Render Users Table from Firestore ---
      const usersCollection = collection(db, "users");
      const usersSnapshot = await getDocs(usersCollection);
      const usersTableBody = document.getElementById('users-table-body');
      usersTableBody.innerHTML = ''; 

      usersSnapshot.forEach(doc => {
        const userData = doc.data();
        const row = usersTableBody.insertRow();
        const nameCell = row.insertCell();
        const emailCell = row.insertCell();

        nameCell.textContent = userData.fullName;
        emailCell.textContent = userData.email;
      });

    } else {
      window.location.href = "/login";
    }
  });
</script>
